import * as am4core from '@amcharts/amcharts4/core';
import * as am4charts from '@amcharts/amcharts4/charts';
export function singleLineGraph(id, entries) {
    let chart = am4core.create(id, am4charts.XYChart);
    chart.paddingLeft = 0;
    chart.data = entries;
    // Create axes
    let dateAxis = chart.xAxes.push(new am4charts.DateAxis());
    dateAxis.fontSize = 10;
    dateAxis.minZoomCount = 5;
    dateAxis.renderer.grid.template.location = 0;
    dateAxis.renderer.minGridDistance = 45;
    dateAxis.dateFormats.setKey('day', 'dd MMM');
    dateAxis.tooltip.fontSize = 12;
    // Create value axis
    let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());
    valueAxis.fontSize = 10;
    valueAxis.extraTooltipPrecision = 2;
    valueAxis.tooltip.fontSize = 12;
    // Create series
    let lineSeries = chart.series.push(new am4charts.LineSeries());
    lineSeries.dataFields.valueY = 'value';
    lineSeries.dataFields.dateX = 'date';
    lineSeries.fontSize = 10;
    lineSeries.strokeWidth = 1.5;
    lineSeries.strokeDasharray = '4';
    lineSeries.stroke = am4core.color('#E55F3B');
    // Add simple bullet
    let bullet = lineSeries.bullets.push(new am4charts.CircleBullet());
    // bullet.disabled = true;
    // bullet.propertyFields.disabled = "disabled";
    bullet.circle.strokeWidth = 0;
    bullet.circle.radius = 2;
    bullet.circle.fill = am4core.color('#6270DD');
    let secondCircle = bullet.createChild(am4core.Circle);
    secondCircle.radius = 3;
    secondCircle.fill = am4core.color('#6270DD');
    secondCircle.strokeWidth = 0;
    chart.cursor = new am4charts.XYCursor();
    chart.cursor.behavior = 'none';
    chart.cursor.xAxis = dateAxis;
    chart.cursor.snapToSeries = lineSeries;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2luZ2xlLWxpbmUtZ3JhcGguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtZml0ZWxvL3NyYy9saWIvYW5hbHlzaXMtZ3JhcGgvaGVscGVycy9zaW5nbGUtbGluZS1ncmFwaC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEtBQUssT0FBTyxNQUFNLDBCQUEwQixDQUFDO0FBQ3BELE9BQU8sS0FBSyxTQUFTLE1BQU0sNEJBQTRCLENBQUM7QUFFeEQsTUFBTSxVQUFVLGVBQWUsQ0FBQyxFQUFFLEVBQUUsT0FBTztJQUN6QyxJQUFJLEtBQUssR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDbEQsS0FBSyxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUM7SUFFdEIsS0FBSyxDQUFDLElBQUksR0FBRyxPQUFPLENBQUM7SUFFckIsY0FBYztJQUNkLElBQUksUUFBUSxHQUFRLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksU0FBUyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFDL0QsUUFBUSxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUM7SUFDdkIsUUFBUSxDQUFDLFlBQVksR0FBRyxDQUFDLENBQUM7SUFDMUIsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUM7SUFDN0MsUUFBUSxDQUFDLFFBQVEsQ0FBQyxlQUFlLEdBQUcsRUFBRSxDQUFDO0lBQ3ZDLFFBQVEsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsQ0FBQztJQUM3QyxRQUFRLENBQUMsT0FBTyxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUM7SUFFL0Isb0JBQW9CO0lBQ3BCLElBQUksU0FBUyxHQUFRLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksU0FBUyxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUM7SUFDakUsU0FBUyxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUM7SUFDeEIsU0FBUyxDQUFDLHFCQUFxQixHQUFHLENBQUMsQ0FBQztJQUNwQyxTQUFTLENBQUMsT0FBTyxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUM7SUFFaEMsZ0JBQWdCO0lBQ2hCLElBQUksVUFBVSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksU0FBUyxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUM7SUFDL0QsVUFBVSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEdBQUcsT0FBTyxDQUFDO0lBQ3ZDLFVBQVUsQ0FBQyxVQUFVLENBQUMsS0FBSyxHQUFHLE1BQU0sQ0FBQztJQUNyQyxVQUFVLENBQUMsUUFBUSxHQUFHLEVBQUUsQ0FBQztJQUN6QixVQUFVLENBQUMsV0FBVyxHQUFHLEdBQUcsQ0FBQztJQUM3QixVQUFVLENBQUMsZUFBZSxHQUFHLEdBQUcsQ0FBQztJQUNqQyxVQUFVLENBQUMsTUFBTSxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUM7SUFFN0Msb0JBQW9CO0lBQ3BCLElBQUksTUFBTSxHQUFHLFVBQVUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksU0FBUyxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUM7SUFDbkUsMEJBQTBCO0lBQzFCLCtDQUErQztJQUMvQyxNQUFNLENBQUMsTUFBTSxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUM7SUFDOUIsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0lBQ3pCLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUM7SUFFOUMsSUFBSSxZQUFZLEdBQUcsTUFBTSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDdEQsWUFBWSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7SUFDeEIsWUFBWSxDQUFDLElBQUksR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQzdDLFlBQVksQ0FBQyxXQUFXLEdBQUcsQ0FBQyxDQUFDO0lBRTdCLEtBQUssQ0FBQyxNQUFNLEdBQUcsSUFBSSxTQUFTLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDeEMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxRQUFRLEdBQUcsTUFBTSxDQUFDO0lBQy9CLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxHQUFHLFFBQVEsQ0FBQztJQUM5QixLQUFLLENBQUMsTUFBTSxDQUFDLFlBQVksR0FBRyxVQUFVLENBQUM7QUFDekMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGFtNGNvcmUgZnJvbSAnQGFtY2hhcnRzL2FtY2hhcnRzNC9jb3JlJztcbmltcG9ydCAqIGFzIGFtNGNoYXJ0cyBmcm9tICdAYW1jaGFydHMvYW1jaGFydHM0L2NoYXJ0cyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBzaW5nbGVMaW5lR3JhcGgoaWQsIGVudHJpZXMpIHtcbiAgbGV0IGNoYXJ0ID0gYW00Y29yZS5jcmVhdGUoaWQsIGFtNGNoYXJ0cy5YWUNoYXJ0KTtcbiAgY2hhcnQucGFkZGluZ0xlZnQgPSAwO1xuXG4gIGNoYXJ0LmRhdGEgPSBlbnRyaWVzO1xuXG4gIC8vIENyZWF0ZSBheGVzXG4gIGxldCBkYXRlQXhpczogYW55ID0gY2hhcnQueEF4ZXMucHVzaChuZXcgYW00Y2hhcnRzLkRhdGVBeGlzKCkpO1xuICBkYXRlQXhpcy5mb250U2l6ZSA9IDEwO1xuICBkYXRlQXhpcy5taW5ab29tQ291bnQgPSA1O1xuICBkYXRlQXhpcy5yZW5kZXJlci5ncmlkLnRlbXBsYXRlLmxvY2F0aW9uID0gMDtcbiAgZGF0ZUF4aXMucmVuZGVyZXIubWluR3JpZERpc3RhbmNlID0gNDU7XG4gIGRhdGVBeGlzLmRhdGVGb3JtYXRzLnNldEtleSgnZGF5JywgJ2RkIE1NTScpO1xuICBkYXRlQXhpcy50b29sdGlwLmZvbnRTaXplID0gMTI7XG5cbiAgLy8gQ3JlYXRlIHZhbHVlIGF4aXNcbiAgbGV0IHZhbHVlQXhpczogYW55ID0gY2hhcnQueUF4ZXMucHVzaChuZXcgYW00Y2hhcnRzLlZhbHVlQXhpcygpKTtcbiAgdmFsdWVBeGlzLmZvbnRTaXplID0gMTA7XG4gIHZhbHVlQXhpcy5leHRyYVRvb2x0aXBQcmVjaXNpb24gPSAyO1xuICB2YWx1ZUF4aXMudG9vbHRpcC5mb250U2l6ZSA9IDEyO1xuXG4gIC8vIENyZWF0ZSBzZXJpZXNcbiAgbGV0IGxpbmVTZXJpZXMgPSBjaGFydC5zZXJpZXMucHVzaChuZXcgYW00Y2hhcnRzLkxpbmVTZXJpZXMoKSk7XG4gIGxpbmVTZXJpZXMuZGF0YUZpZWxkcy52YWx1ZVkgPSAndmFsdWUnO1xuICBsaW5lU2VyaWVzLmRhdGFGaWVsZHMuZGF0ZVggPSAnZGF0ZSc7XG4gIGxpbmVTZXJpZXMuZm9udFNpemUgPSAxMDtcbiAgbGluZVNlcmllcy5zdHJva2VXaWR0aCA9IDEuNTtcbiAgbGluZVNlcmllcy5zdHJva2VEYXNoYXJyYXkgPSAnNCc7XG4gIGxpbmVTZXJpZXMuc3Ryb2tlID0gYW00Y29yZS5jb2xvcignI0U1NUYzQicpO1xuXG4gIC8vIEFkZCBzaW1wbGUgYnVsbGV0XG4gIGxldCBidWxsZXQgPSBsaW5lU2VyaWVzLmJ1bGxldHMucHVzaChuZXcgYW00Y2hhcnRzLkNpcmNsZUJ1bGxldCgpKTtcbiAgLy8gYnVsbGV0LmRpc2FibGVkID0gdHJ1ZTtcbiAgLy8gYnVsbGV0LnByb3BlcnR5RmllbGRzLmRpc2FibGVkID0gXCJkaXNhYmxlZFwiO1xuICBidWxsZXQuY2lyY2xlLnN0cm9rZVdpZHRoID0gMDtcbiAgYnVsbGV0LmNpcmNsZS5yYWRpdXMgPSAyO1xuICBidWxsZXQuY2lyY2xlLmZpbGwgPSBhbTRjb3JlLmNvbG9yKCcjNjI3MEREJyk7XG5cbiAgbGV0IHNlY29uZENpcmNsZSA9IGJ1bGxldC5jcmVhdGVDaGlsZChhbTRjb3JlLkNpcmNsZSk7XG4gIHNlY29uZENpcmNsZS5yYWRpdXMgPSAzO1xuICBzZWNvbmRDaXJjbGUuZmlsbCA9IGFtNGNvcmUuY29sb3IoJyM2MjcwREQnKTtcbiAgc2Vjb25kQ2lyY2xlLnN0cm9rZVdpZHRoID0gMDtcblxuICBjaGFydC5jdXJzb3IgPSBuZXcgYW00Y2hhcnRzLlhZQ3Vyc29yKCk7XG4gIGNoYXJ0LmN1cnNvci5iZWhhdmlvciA9ICdub25lJztcbiAgY2hhcnQuY3Vyc29yLnhBeGlzID0gZGF0ZUF4aXM7XG4gIGNoYXJ0LmN1cnNvci5zbmFwVG9TZXJpZXMgPSBsaW5lU2VyaWVzO1xufVxuIl19